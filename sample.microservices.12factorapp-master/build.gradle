group = 'net.wasdev.wlp.sample'
version = '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:1.0'
        classpath files('gradle/wlp-anttasks.jar')
    }
}

apply plugin: 'war'
apply plugin: 'liberty'
apply plugin: 'maven-publish'
apply plugin: 'eclipse-wtp'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

ext {
    // Liberty server properties
    serverDirectory = "${buildDir}/wlp/usr/servers/defaultServer"
    testServerHttpPort = 9082
    testServerHttpsPort = 9445
    
    appName = '12-factor-application'
    // This is set in the ibm-web-ext.xml file
    warContext = "${appName}"
    packageFile = "${project.buildDir}/${appName}.zip"
    packagingType = 'usr'
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        mavenWar(MavenPublication) {
            version '1.0-SNAPSHOT'
            groupId 'net.wasdev.wlp.sample'
            artifactId '12-factor-application'

            from components.web
        }
    }
}

dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    providedCompile 'com.ibm.websphere.appserver.api:com.ibm.websphere.appserver.api.servlet:1.0.10'
    providedCompile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    providedCompile 'com.ibm.websphere.appserver.api:com.ibm.websphere.appserver.api.jaxrs20:1.0.10'
    providedCompile 'javax.json:javax.json-api:1.0'
    providedCompile 'com.ibm.websphere.appserver.api:com.ibm.websphere.appserver.api.json:1.0.10'
    providedCompile 'javax.enterprise:cdi-api:1.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.cxf:cxf-rt-rs-client:3.1.1'
    testCompile 'org.glassfish:javax.json:1.0.4'
    compile 'com.cloudant:cloudant-client:2.7.0'
}

// Set the Eclipse facets to use 3.0 of the Dynamic Web Module
eclipse.wtp.facet {
    facets = []
    facet name: 'jst.java', type: 'fixed'
    facet name: 'jst.web', type: 'fixed'
    facet name: 'jst.java', version: '1.7'
    facet name: 'jst.web', version: '3.0'
}

test {
    reports.html.destination = file("$buildDir/reports/unit")
    reports.junitXml.destination = file("$buildDir/test-results/unit")
    exclude '**/it/**'
}

task integrationTest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    reports.html.destination = file("$buildDir/reports/it")
    reports.junitXml.destination = file("$buildDir/test-results/it")
    include '**/it/**'
    exclude '**/unit/**'

    systemProperties = ['liberty.test.port': testServerHttpPort, 'war.context': warContext]
}

task printMessageAboutRunningServer {
    doLast {
        println "The server is now running at http://localhost:${testServerHttpPort}/${warContext}"
        println "To stop the server run 'gradle libertyStop'"
    }
}

task publishServerConfig(type: Copy) {
    from 'src/main/liberty/config/server.xml'
    into serverDirectory
}

task publishWar(type: Copy) {
    from(war)
    into("${serverDirectory}/dropins")
}

task createServerBootstrap() {
    outputs.file("${serverDirectory}/bootstrap.properties")
    doLast {
        def bootstrapProperties = file("${serverDirectory}/bootstrap.properties")
        if (!bootstrapProperties.exists()) {
            bootstrapProperties << "default.http.port=${testServerHttpPort}\ndefault.https.port=${testServerHttpsPort}"
        }
    }
}

liberty {
    install {
        runtimeUrl = "http://repo1.maven.org/maven2/com/ibm/websphere/appserver/runtime/wlp-webProfile7/16.0.0.3/wlp-webProfile7-16.0.0.3.zip"
    }
    packageLiberty {
        archive = packageFile
        include = packagingType
    }
}

task libertyStartTestServer(type: net.wasdev.wlp.gradle.plugins.tasks.StartTask){
    description 'Starts the WebSphere Liberty Profile server for testing.'
    logging.level = LogLevel.INFO
}

tasks.create('setupServer')
check.dependsOn 'integrationTest'
setupServer.dependsOn 'installLiberty', 'createServerBootstrap', 'publishServerConfig', 'publishWar'
publishServerConfig.mustRunAfter 'installLiberty'
createServerBootstrap.mustRunAfter 'publishServerConfig'
publishWar.mustRunAfter 'installLiberty'
publishWar.dependsOn 'war'
libertyStart.dependsOn 'setupServer'
integrationTest.dependsOn 'libertyStartTestServer', 'testClasses'
integrationTest.finalizedBy 'libertyStop'
libertyStartTestServer.dependsOn 'setupServer'
assemble.dependsOn 'libertyPackage'
libertyPackage.dependsOn 'setupServer'
libertyStart.finalizedBy 'printMessageAboutRunningServer'
